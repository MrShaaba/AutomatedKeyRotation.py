import json
import boto3
import base64
import datetime
import os
from datetime import date
from botocore.exceptions import ClientError
iam = boto3.client('iam')
secretmanager = boto3.client('secretsmanager')
from botocore.session import Session
from botocore.config import Config

s = Session()
c = s.create_client('s3', config=Config(connect_timeout=5, read_timeout=60, retries={'max_attempts': 2}))
#IAM_UserName=os.environ['IAM_UserName']
#SecretName=os.environ['SecretName']

def create_key(uname):
    try:
        IAM_UserName=uname
        response = iam.create_access_key(UserName=os.environ['IAM_UserName'])
        AccessKey = response['AccessKey']['AccessKeyId']
        SecretKey = response['AccessKey']['SecretAccessKey']
        json_data=json.dumps({'AccessKey':AccessKey,'SecretKey':SecretKey})
        secmanagerv=secretmanager.put_secret_value(SecretId=os.environ['IAM_UserName'],SecretString=json_data)
        emailmsg=f"New keys: "+AccessKey+" has been created for the CLI user HybridCloudUser. You can retrieve the Secret Key value from Secret Manager, for key name, please visit confluence page:"
        ops_sns_topic =os.environ['Ops_SnS_Topic']
        sns_send_report = boto3.client('sns',region_name=os.environ['AWS_REGION'])
        sns_send_report.publish(TopicArn=ops_sns_topic, Message=emailmsg, Subject= f"Key Management Lifecycle - New keys for IAM user:" +  os.environ['IAM_UserName'])
    except ClientError as e:
        print (e)

def deactive_key(uname):
    try:
	    #GET PREVIOUS AND CURRENT VERSION OF KEY FROM SECRET MANAGER
        IAM_UserName=uname
        getpresecvalue=secretmanager.get_secret_value(SecretId=os.environ['IAM_UserName'],VersionStage='AWSPREVIOUS')
        #getcursecvalue=secretmanager.get_secret_value(SecretId='secmanager3',VersionStage='AWSCURRENT')
        #print (getpresecvalue)
        #print (getcursecvalue)
        preSecString = json.loads(getpresecvalue['SecretString'])
        preAccKey=preSecString['AccessKey']
        #GET CREATION DATE OF CURRENT VERSION OF ACCESS KEY
        #curdate=getcursecvalue['CreatedDate']
        #GET TIMEZONE FROM CREATION DATE
        #tz=curdate.tzinfo
        #CALCULATE TIME DIFFERENCE BETWEEN CREATION DATE AND TODAY
        #diff=datetime.datetime.now(tz)-curdate
        #diffdays=diff.days
        #print (curdate)
        #print (tz)
        #print (diffdays)
        #print (preAccKey)
        #IF TIME DIFFERENCE IS MORE THAN x NUMBER OF DAYS THEN DEACTIVATE PREVIOUS KEY AND SEND A MESSAGE
        #if diffdays >= 1:
        iam.update_access_key(AccessKeyId=preAccKey,Status='Inactive',UserName=os.environ['IAM_UserName'])
        emailmsg="PreviousKey "+preAccKey+" has been disabled for IAM User"+ os.environ['IAM_UserName']
        ops_sns_topic =os.environ['Ops_SnS_Topic']
        sns_send_report = boto3.client('sns',region_name=os.environ['AWS_REGION'])
        sns_send_report.publish(TopicArn=ops_sns_topic, Message=emailmsg, Subject='Previous Key Deactivated')
        return
    except ClientError as e:
        print (e)
    #else:
    #    print ("Current Key is not older than 10 days")
    #print (datediff)

def delete_key(uname):
    try:
        IAM_UserName=uname
        print (IAM_UserName)
        getpresecvalue=secretmanager.get_secret_value(SecretId=os.environ['IAM_UserName'],VersionStage='AWSPREVIOUS')
    #getcursecvalue=secretmanager.get_secret_value(SecretId='secmanager3',VersionStage='AWSCURRENT')
        preSecString = json.loads(getpresecvalue['SecretString'])
        preAccKey=preSecString['AccessKey']
        #print (preAccKey)
    #GET CREATION DATE OF CURRENT VERSION OF ACCESS KEY
    #curdate=getcursecvalue['CreatedDate']
    #GET TIMEZONE FROM CREATION DATE
    #tz=curdate.tzinfo
    #CALCULATE TIME DIFFERENCE BETWEEN CREATION DATE AND TODAY
    #diff=datetime.datetime.now(tz)-curdate
    #diffdays=diff.days
    #IF TIME DIFFERENCE IS MORE THAN x NUMBER OF DAYS THEN DEACTIVATE PREVIOUS KEY AND SEND A MESSAGE
    #if diffdays >= 1:
        keylist=iam.list_access_keys (UserName=os.environ['IAM_UserName'])
    #print (keylist)
        for x in range(2):
            prevkeystatus=keylist['AccessKeyMetadata'][x]['Status']
            preacckeyvalue=keylist['AccessKeyMetadata'][x]['AccessKeyId']
            print (prevkeystatus)
            if prevkeystatus == "Inactive": 
                if preAccKey==preacckeyvalue:
                    print (preacckeyvalue)
                    iam.delete_access_key (UserName=os.environ['IAM_UserName'],AccessKeyId=preacckeyvalue)
                    emailmsg="PreviousKey "+preacckeyvalue+" has been deleted for user"+ os.environ['IAM_UserName']
                    ops_sns_topic =os.environ['Ops_SnS_Topic']
                    sns_send_report = boto3.client('sns',region_name=os.environ['AWS_REGION'])
                    sns_send_report.publish(TopicArn=ops_sns_topic, Message=emailmsg, Subject='Previous Key has been deleted')
                    return
                else:
                    print ("secret manager previous value doesn't match with inactive IAM key value")
            else:
                print ("previous key is still active")
        return
    except ClientError as e:
        print (e)
    #else:
    #print ("Current Key is not older than 10 days")
    
def lambda_handler(event, context):

# Security Account if-elif loop 
    
    faction=event ["action"]
    fuser_name=event ["username"]
    if faction == "create":
        status = create_key(fuser_name)
        print (status)
    elif faction == "deactivate":
        status = deactive_key(fuser_name)
        print (status)
    elif faction == "delete":
        status = delete_key(fuser_name)
        print (status)
        

    sts_connection = boto3.client('sts', region_name=os.environ['AWS_REGION'], endpoint_url=os.environ['EndPointURL'])
    acct_b = sts_connection.assume_role(
        RoleArn=os.environ['RoleToAssume'],
        RoleSessionName="cross_acct_key_management_lifecycle_lambda_session"
    )
    
    ACCESS_KEY = acct_b['Credentials']['AccessKeyId']
    SECRET_KEY = acct_b['Credentials']['SecretAccessKey']
    SESSION_TOKEN = acct_b['Credentials']['SessionToken']

# Service creation for cross account role assumption (IAM)
    client = boto3.client(
        'iam',
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
        aws_session_token=SESSION_TOKEN,
)   
    response = client.list_users()
    for user in response['Users']:
        tags = client.list_user_tags(UserName = user['UserName'])
        if tags['Tags']:
            for tag in tags['Tags']:
                if tag['Key'] == 'SecretStoreName':
                    SecretNameValue = str(tag['Value']) 
 
#CrossAccount If-Elif loop        
    if faction == "create":
        response1 = client.create_access_key(UserName=os.environ['IAM_UserName'],)
        AccessKey = response1['AccessKey']['AccessKeyId']
        SecretKey = response1['AccessKey']['SecretAccessKey']
        json_data=json.dumps({'AccessKey':AccessKey,'SecretKey':SecretKey})
        secmanagerv=secretmanager.put_secret_value(SecretId=SecretNameValue, SecretString=json_data)
        print(response1)
    elif faction == "deactivate":
        getpresecvalue=secretmanager.get_secret_value(SecretId=SecretNameValue,VersionStage='AWSPREVIOUS')
        preSecString = json.loads(getpresecvalue['SecretString'])
        preAccKey=preSecString['AccessKey']
        response2 = client.update_access_key(AccessKeyId=preAccKey, Status='Inactive', UserName=os.environ['IAM_UserName'])
        #except ClientError as e:
        #print (e)
    elif faction == "delete":
        getpresecvalue=secretmanager.get_secret_value(SecretId=SecretNameValue,VersionStage='AWSPREVIOUS')
        preSecString = json.loads(getpresecvalue['SecretString'])
        preAccKey=preSecString['AccessKey']   
        keylist=client.list_access_keys (UserName=os.environ['IAM_UserName'])     
        for x in range(2):
            prevkeystatus=keylist['AccessKeyMetadata'][x]['Status']
            preacckeyvalue=keylist['AccessKeyMetadata'][x]['AccessKeyId']
            print (prevkeystatus)
            if prevkeystatus == "Inactive": 
                if preAccKey==preacckeyvalue:
                    print (preacckeyvalue)        
                    response1 = client.delete_access_key(UserName=os.environ['IAM_UserName'], AccessKeyId=preacckeyvalue)
                    return
                else:
                    print ("secret manager previous value doesn't match with inactive IAM key value")
            else:
                print ("previous key is still active")
        return
